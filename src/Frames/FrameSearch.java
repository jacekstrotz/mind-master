/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;
import Data.Score.ScoreComparator2;
import Data.*;
import java.util.Collections;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author strotz
 */
public class FrameSearch extends javax.swing.JFrame {

    private int bitFilter;
    private SpinnerNumberModel pegModel[] = 
      { new SpinnerNumberModel(0, 0, 1000, 1),
        new SpinnerNumberModel(-1, -1, 1000, 1)};
    
    public FrameSearch() {
        initComponents();
        
        guessesSpinner.setModel(pegModel[0]);
        ((JSpinner.DefaultEditor)guessesSpinner.getEditor()).getTextField().setEditable(false);
        
        indexSpinner.setModel(pegModel[1]);
        ((JSpinner.DefaultEditor)indexSpinner.getEditor()).getTextField().setEditable(false);
        
        showAll();
        bitFilter = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        returnButton = new javax.swing.JButton();
        mainLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        indexLabel = new javax.swing.JLabel();
        indexSpinner = new javax.swing.JSpinner();
        guessLabel = new javax.swing.JLabel();
        guessesSpinner = new javax.swing.JSpinner();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        oldestButton = new javax.swing.JButton();
        bestButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        returnButton.setText("<--");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        mainLabel.setFont(new java.awt.Font(".SF NS Text", 1, 24)); // NOI18N
        mainLabel.setText("Search");

        outputArea.setColumns(20);
        outputArea.setRows(5);
        jScrollPane1.setViewportView(outputArea);

        indexLabel.setText("Search by Index:");

        indexSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                indexSpinnerStateChanged(evt);
            }
        });

        guessLabel.setText("Number of Guesses:");

        guessesSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                guessesSpinnerStateChanged(evt);
            }
        });

        nameLabel.setText("Name:");

        nameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameTextFieldKeyReleased(evt);
            }
        });

        oldestButton.setText("Oldest Score");
        oldestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oldestButtonActionPerformed(evt);
            }
        });

        bestButton.setText("Best Score");
        bestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(guessLabel)
                                    .addComponent(indexLabel)
                                    .addComponent(nameLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(indexSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(guessesSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(bestButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(oldestButton, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)))
                                    .addComponent(nameTextField))
                                .addGap(0, 84, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnButton)
                    .addComponent(mainLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexLabel)
                    .addComponent(indexSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oldestButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guessLabel)
                    .addComponent(guessesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bestButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        FrameManager.displayFrame(this, "Main");
    }//GEN-LAST:event_returnButtonActionPerformed

    private void oldestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oldestButtonActionPerformed
        bitFilter = 0b1000;
        outputArea.setText("");
        
        Collections.sort(DataModel.ms.list, new ScoreComparator2());
        for (int i = 0; i < DataModel.ms.list.size(); i++) {
            outputArea.append(DataModel.ms.list.get(i).toString() + "\n");
        }
        
        outputArea.setText(DataModel.ms.list.get((DataModel.ms.list.size() == 0) ? 0 : DataModel.ms.list.size()-1).toString());
    }//GEN-LAST:event_oldestButtonActionPerformed

    private void nameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextFieldKeyReleased
        outputArea.setText("");
        if (nameTextField.getText().isBlank() && (bitFilter == 0b100 || bitFilter == 0)) {
            bitFilter = 0;
            showAll();
            return;
        }
        
        filter();
    }//GEN-LAST:event_nameTextFieldKeyReleased

    private void bestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestButtonActionPerformed
        bitFilter = 0b10000;
        outputArea.setText("");
        
        Collections.sort(DataModel.ms.list, new ScoreComparator2());
        for (int i = 0; i < DataModel.ms.list.size(); i++) {
            outputArea.append(DataModel.ms.list.get(i).toString() + "\n");
        }
        
        outputArea.setText(DataModel.ms.list.get(0).toString());
    }//GEN-LAST:event_bestButtonActionPerformed

    private void indexSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_indexSpinnerStateChanged
        if ((int)indexSpinner.getValue() < DataModel.ms.list.size())
            filter();
        else
            outputArea.setText("");
    }//GEN-LAST:event_indexSpinnerStateChanged

    private void guessesSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_guessesSpinnerStateChanged
        filter();
    }//GEN-LAST:event_guessesSpinnerStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameSearch().setVisible(true);
            }
        });
    }
    
    public void showAll() {
        for (int i = 0; i < DataModel.ms.list.size(); i++) {
            outputArea.append(DataModel.ms.list.get(i).toString() + "\n");
        }
    }
    
    public void filter() {
        bitFilter = 0;
        if ((int)indexSpinner.getValue()>=0) 
            bitFilter = 0b10;
        else {
            if (!nameTextField.getText().isBlank())
                bitFilter |= 0b100;
            if ((int)guessesSpinner.getValue()>0)
                bitFilter |= 0b1;
        }
        
        outputArea.setText("");
        if (bitFilter == 0b10) {
            outputArea.setText(DataModel.ms.list.get((int)indexSpinner.getValue()).toString());
        }
        else {
            if ((bitFilter & 0b1) == 1) {
                for (int i = 0; i < DataModel.ms.list.size(); i++) {
                    if (DataModel.ms.list.get(i).getNumGuess() <= (int)guessesSpinner.getValue()) {
                        if ((bitFilter & 0b100) == 0b100 && 
                                DataModel.ms.list.get(i).getName().contains(nameTextField.getText())) 
                            outputArea.append(DataModel.ms.list.get(i).toString()+"\n");
                        else if ((bitFilter & 0b100) != 0b100)
                            outputArea.append(DataModel.ms.list.get(i).toString()+"\n");
                    }
                }
            }
            else if ((bitFilter & 0b100) == 0b100) {
                for (int i = 0; i < DataModel.ms.list.size(); i++)
                    if (DataModel.ms.list.get(i).getName().contains(nameTextField.getText()))
                        outputArea.append(DataModel.ms.list.get(i).toString() + "\n");
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bestButton;
    private javax.swing.JLabel guessLabel;
    private javax.swing.JSpinner guessesSpinner;
    private javax.swing.JLabel indexLabel;
    private javax.swing.JSpinner indexSpinner;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton oldestButton;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables
}
